const AdmZip = require("adm-zip");
const fs = require("fs");
const glob = require("glob");
const os = require("os");
const path = require("path");
const puppeteer = require("puppeteer");

/**
 * Creates a new Looker Download client using the specified parameters.
 *
 * @param {string} host the host to connect to
 * @param {string} username the username to connect with
 * @param {string} password the password to connect with
 * @param {boolean} headless if puppeteer should run in headeless or headful mode
 * @param {any} log a logger to use, by default will use console
 * @returns a newly constructed LookerDownload client
 */
function LookerDownload(
  host,
  username,
  password,
  headless = true,
  log = {
    debug: console.log,
    info: console.log,
    warn: console.log,
    error: console.error,
  }
) {
  if (!(this instanceof LookerDownload)) {
    return new LookerDownload(host, username, password, headless, log);
  }
  this.username = username;
  this.password = password;
  this.host = host;
  this.headless = headless;
  this.log = log;
}

/**
 * Starts up the Looker Download client. Must be called prior to downloading a report.
 */
LookerDownload.prototype.startup = async function () {
  this.log.info("Starting virtual browser...");

  this.browser = await puppeteer.launch({ headless: this.headless });
  this.page = await this.browser.newPage();

  this.log.info("Logging in to Looker...");
  await this.page.goto(`${this.host}/login`, {
    waitUntil: "networkidle0",
  });

  await this.page.type("input[name=email]", this.username);
  await this.page.type("input[name=password]", this.password);
  await this.page.click("input[type=submit]");
  try {
    await this.page.waitForNavigation();
  } catch (err) {
    this.log.warn(
      "Expected navigation did not occur. Assuming okay and moving on",
      err
    );
  }
};

/**
 * Downloads the file generated by the report. Includes extracting and saving the zip'd CSVs to the destination file
 *
 * @param {number} report the report ID
 * @param {any} filter the filter for the report
 * @param {string} destination the destination file to which to save the report
 */
LookerDownload.prototype.downloadReport = async function (
  report = 0,
  filter = {},
  destination = "report.csv"
) {
  const url = `${
    this.host
  }/dashboards/${report}/downloadzip?filters=${encodeURIComponent(
    JSON.stringify(filter)
  )}`;
  let tmpDir = null;
  try {
    tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), "looker-download"));
    await this.page._client.send("Page.setDownloadBehavior", {
      behavior: "allow",
      downloadPath: tmpDir,
    });

    this.log.info("Downloading file...");
    try {
      await this.page.goto(url);
    } catch (e) {
      this.log.debug(`Expected network abort ${e}`);
    }

    await this.page.waitForTimeout(5000);

    this.log.info(`Unpacking file...`);
    const fileName = glob.sync(`${tmpDir}/*.zip`)[0];
    if (!fileName) {
      this.log.error(
        "Failed to download file, usually due to a bad report configuration or authentication. Try again with headless off."
      );
    }
    const zip = new AdmZip(fileName);
    const csv = zip.readAsText(zip.getEntries()[0].entryName);
    fs.writeFileSync(destination, csv);
    this.log.info(`Download complete, downloaded to: ${destination}`);
  } finally {
    if (tmpDir) {
      fs.rmSync(tmpDir, { recursive: true });
    }
  }
};

/**
 * Shutdowns the LookerDownloader, must be called when all downloads are complete.
 */
LookerDownload.prototype.shutdown = async function () {
  await this.browser.close();
};

module.exports = LookerDownload;
